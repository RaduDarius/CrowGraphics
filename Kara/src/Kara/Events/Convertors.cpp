#include "pch.hpp"

#include "Convertors.hpp"

#include <GLFW/glfw3.h>

namespace Kara {
namespace Events {
KeyCode ConvertToKeyCode(const int aKeyCode) {
  switch (aKeyCode) {
  case GLFW_KEY_SPACE:
    return KeyCode::Space;
  case GLFW_KEY_APOSTROPHE:
    return KeyCode::Apostrophe;
  case GLFW_KEY_COMMA:
    return KeyCode::Comma;
  case GLFW_KEY_MINUS:
    return KeyCode::Minus;
  case GLFW_KEY_PERIOD:
    return KeyCode::Period;
  case GLFW_KEY_SLASH:
    return KeyCode::Slash;
  case GLFW_KEY_0:
    return KeyCode::Key0;
  case GLFW_KEY_1:
    return KeyCode::Key1;
  case GLFW_KEY_2:
    return KeyCode::Key2;
  case GLFW_KEY_3:
    return KeyCode::Key3;
  case GLFW_KEY_4:
    return KeyCode::Key4;
  case GLFW_KEY_5:
    return KeyCode::Key5;
  case GLFW_KEY_6:
    return KeyCode::Key6;
  case GLFW_KEY_7:
    return KeyCode::Key7;
  case GLFW_KEY_8:
    return KeyCode::Key8;
  case GLFW_KEY_9:
    return KeyCode::Key9;
  case GLFW_KEY_SEMICOLON:
    return KeyCode::Semicolon;
  case GLFW_KEY_EQUAL:
    return KeyCode::Equal;
  case GLFW_KEY_A:
    return KeyCode::A;
  case GLFW_KEY_B:
    return KeyCode::B;
  case GLFW_KEY_C:
    return KeyCode::C;
  case GLFW_KEY_D:
    return KeyCode::D;
  case GLFW_KEY_E:
    return KeyCode::E;
  case GLFW_KEY_F:
    return KeyCode::F;
  case GLFW_KEY_G:
    return KeyCode::G;
  case GLFW_KEY_H:
    return KeyCode::H;
  case GLFW_KEY_I:
    return KeyCode::I;
  case GLFW_KEY_J:
    return KeyCode::J;
  case GLFW_KEY_K:
    return KeyCode::K;
  case GLFW_KEY_L:
    return KeyCode::L;
  case GLFW_KEY_M:
    return KeyCode::M;
  case GLFW_KEY_N:
    return KeyCode::N;
  case GLFW_KEY_O:
    return KeyCode::O;
  case GLFW_KEY_P:
    return KeyCode::P;
  case GLFW_KEY_Q:
    return KeyCode::Q;
  case GLFW_KEY_R:
    return KeyCode::R;
  case GLFW_KEY_S:
    return KeyCode::S;
  case GLFW_KEY_T:
    return KeyCode::T;
  case GLFW_KEY_U:
    return KeyCode::U;
  case GLFW_KEY_V:
    return KeyCode::V;
  case GLFW_KEY_W:
    return KeyCode::W;
  case GLFW_KEY_X:
    return KeyCode::X;
  case GLFW_KEY_Y:
    return KeyCode::Y;
  case GLFW_KEY_Z:
    return KeyCode::Z;
  case GLFW_KEY_LEFT_BRACKET:
    return KeyCode::LeftBracket;
  case GLFW_KEY_BACKSLASH:
    return KeyCode::Backslash;
  case GLFW_KEY_RIGHT_BRACKET:
    return KeyCode::RightBracket;
  case GLFW_KEY_GRAVE_ACCENT:
    return KeyCode::GraveAccent;
  case GLFW_KEY_ESCAPE:
    return KeyCode ::Escape;
  case GLFW_KEY_ENTER:
    return KeyCode::Enter;
  case GLFW_KEY_TAB:
    return KeyCode::Tab;
  case GLFW_KEY_BACKSPACE:
    return KeyCode::Backspace;
  case GLFW_KEY_INSERT:
    return KeyCode::Insert;
  case GLFW_KEY_DELETE:
    return KeyCode::Delete;
  case GLFW_KEY_RIGHT:
    return KeyCode::RightArrow;
  case GLFW_KEY_LEFT:
    return KeyCode::LeftArrow;
  case GLFW_KEY_DOWN:
    return KeyCode::DownArrow;
  case GLFW_KEY_UP:
    return KeyCode::UpArrow;
  case GLFW_KEY_PAGE_UP:
    return KeyCode::PageUp;
  case GLFW_KEY_PAGE_DOWN:
    return KeyCode::PageDown;
  case GLFW_KEY_HOME:
    return KeyCode::Home;
  case GLFW_KEY_END:
    return KeyCode::End;
  case GLFW_KEY_CAPS_LOCK:
    return KeyCode::CapsLock;
  case GLFW_KEY_SCROLL_LOCK:
    return KeyCode::ScrollLock;
  case GLFW_KEY_NUM_LOCK:
    return KeyCode::NumLock;
  case GLFW_KEY_PRINT_SCREEN:
    return KeyCode::PrintScreen;
  case GLFW_KEY_PAUSE:
    return KeyCode::Pause;
  case GLFW_KEY_F1:
    return KeyCode::F1;
  case GLFW_KEY_F2:
    return KeyCode::F2;
  case GLFW_KEY_F3:
    return KeyCode::F3;
  case GLFW_KEY_F4:
    return KeyCode::F4;
  case GLFW_KEY_F5:
    return KeyCode::F5;
  case GLFW_KEY_F6:
    return KeyCode::F6;
  case GLFW_KEY_F7:
    return KeyCode::F7;
  case GLFW_KEY_F8:
    return KeyCode::F8;
  case GLFW_KEY_F9:
    return KeyCode::F9;
  case GLFW_KEY_F10:
    return KeyCode::F10;
  case GLFW_KEY_F11:
    return KeyCode::F11;
  case GLFW_KEY_F12:
    return KeyCode::F12;
  case GLFW_KEY_F13:
    return KeyCode::F13;
  case GLFW_KEY_F14:
    return KeyCode::F14;
  case GLFW_KEY_F15:
    return KeyCode::F15;
  case GLFW_KEY_F16:
    return KeyCode::F16;
  case GLFW_KEY_F17:
    return KeyCode::F17;
  case GLFW_KEY_F18:
    return KeyCode::F18;
  case GLFW_KEY_F19:
    return KeyCode::F19;
  case GLFW_KEY_F20:
    return KeyCode::F20;
  case GLFW_KEY_F21:
    return KeyCode::F21;
  case GLFW_KEY_F22:
    return KeyCode::F22;
  case GLFW_KEY_F23:
    return KeyCode::F23;
  case GLFW_KEY_F24:
    return KeyCode::F24;
  case GLFW_KEY_F25:
    return KeyCode::F25;
  case GLFW_KEY_KP_0:
    return KeyCode::KP0;
  case GLFW_KEY_KP_1:
    return KeyCode::KP1;
  case GLFW_KEY_KP_2:
    return KeyCode::KP2;
  case GLFW_KEY_KP_3:
    return KeyCode::KP3;
  case GLFW_KEY_KP_4:
    return KeyCode::KP4;
  case GLFW_KEY_KP_5:
    return KeyCode::KP5;
  case GLFW_KEY_KP_6:
    return KeyCode::KP6;
  case GLFW_KEY_KP_7:
    return KeyCode::KP7;
  case GLFW_KEY_KP_8:
    return KeyCode::KP8;
  case GLFW_KEY_KP_9:
    return KeyCode::KP9;
  case GLFW_KEY_KP_DECIMAL:
    return KeyCode::KPDecimal;
  case GLFW_KEY_KP_DIVIDE:
    return KeyCode::KPDivide;
  case GLFW_KEY_KP_MULTIPLY:
    return KeyCode::KPMultiply;
  case GLFW_KEY_KP_SUBTRACT:
    return KeyCode::KPSubtract;
  case GLFW_KEY_KP_ADD:
    return KeyCode::KPAdd;
  case GLFW_KEY_KP_ENTER:
    return KeyCode::KPEnter;
  case GLFW_KEY_KP_EQUAL:
    return KeyCode::KPEqual;
  case GLFW_KEY_LEFT_SHIFT:
    return KeyCode::LeftShift;
  case GLFW_KEY_LEFT_CONTROL:
    return KeyCode::LeftControl;
  case GLFW_KEY_LEFT_ALT:
    return KeyCode::LeftAlt;
  case GLFW_KEY_LEFT_SUPER:
    return KeyCode::LeftSuper;
  case GLFW_KEY_RIGHT_SHIFT:
    return KeyCode::RightShift;
  case GLFW_KEY_RIGHT_CONTROL:
    return KeyCode ::RightControl;
  case GLFW_KEY_RIGHT_ALT:
    return KeyCode::RightAlt;
  case GLFW_KEY_RIGHT_SUPER:
    return KeyCode::RightSuper;
  case GLFW_KEY_MENU:
    return KeyCode::Menu;

  default:
    return KeyCode::None;
  }
}

ImGuiKey ConvertToImGuiKey(const KeyCode aKeyCode) {
  switch (aKeyCode) {
  case KeyCode::Tab:
    return ImGuiKey_Tab;
  case KeyCode::LeftArrow:
    return ImGuiKey_LeftArrow;
  case KeyCode::RightArrow:
    return ImGuiKey_RightArrow;
  case KeyCode::UpArrow:
    return ImGuiKey_UpArrow;
  case KeyCode::DownArrow:
    return ImGuiKey_DownArrow;
  case KeyCode::PageUp:
    return ImGuiKey_PageUp;
  case KeyCode::PageDown:
    return ImGuiKey_PageDown;
  case KeyCode::Home:
    return ImGuiKey_Home;
  case KeyCode::End:
    return ImGuiKey_End;
  case KeyCode::Insert:
    return ImGuiKey_Insert;
  case KeyCode::Delete:
    return ImGuiKey_Delete;
  case KeyCode::Backspace:
    return ImGuiKey_Backspace;
  case KeyCode::Space:
    return ImGuiKey_Space;
  case KeyCode::Enter:
    return ImGuiKey_Enter;
  case KeyCode::Escape:
    return ImGuiKey_Escape;
  case KeyCode::Apostrophe:
    return ImGuiKey_Apostrophe;
  case KeyCode::Comma:
    return ImGuiKey_Comma;
  case KeyCode::Minus:
    return ImGuiKey_Minus;
  case KeyCode::Period:
    return ImGuiKey_Period;
  case KeyCode::Slash:
    return ImGuiKey_Slash;
  case KeyCode::Semicolon:
    return ImGuiKey_Semicolon;
  case KeyCode::Equal:
    return ImGuiKey_Equal;
  case KeyCode::LeftBracket:
    return ImGuiKey_LeftBracket;
  case KeyCode::Backslash:
    return ImGuiKey_Backslash;
  case KeyCode::RightBracket:
    return ImGuiKey_RightBracket;
  case KeyCode::GraveAccent:
    return ImGuiKey_GraveAccent;
  case KeyCode::CapsLock:
    return ImGuiKey_CapsLock;
  case KeyCode::ScrollLock:
    return ImGuiKey_ScrollLock;
  case KeyCode::NumLock:
    return ImGuiKey_NumLock;
  case KeyCode::PrintScreen:
    return ImGuiKey_PrintScreen;
  case KeyCode::Pause:
    return ImGuiKey_Pause;
  case KeyCode::KP0:
    return ImGuiKey_Keypad0;
  case KeyCode::KP1:
    return ImGuiKey_Keypad1;
  case KeyCode::KP2:
    return ImGuiKey_Keypad2;
  case KeyCode::KP3:
    return ImGuiKey_Keypad3;
  case KeyCode::KP4:
    return ImGuiKey_Keypad4;
  case KeyCode::KP5:
    return ImGuiKey_Keypad5;
  case KeyCode::KP6:
    return ImGuiKey_Keypad6;
  case KeyCode::KP7:
    return ImGuiKey_Keypad7;
  case KeyCode::KP8:
    return ImGuiKey_Keypad8;
  case KeyCode::KP9:
    return ImGuiKey_Keypad9;
  case KeyCode::KPDecimal:
    return ImGuiKey_KeypadDecimal;
  case KeyCode::KPDivide:
    return ImGuiKey_KeypadDivide;
  case KeyCode::KPMultiply:
    return ImGuiKey_KeypadMultiply;
  case KeyCode::KPSubtract:
    return ImGuiKey_KeypadSubtract;
  case KeyCode::KPAdd:
    return ImGuiKey_KeypadAdd;
  case KeyCode::KPEnter:
    return ImGuiKey_KeypadEnter;
  case KeyCode::KPEqual:
    return ImGuiKey_KeypadEqual;
  case KeyCode::LeftShift:
    return ImGuiKey_LeftShift;
  case KeyCode::LeftControl:
    return ImGuiKey_LeftCtrl;
  case KeyCode::LeftAlt:
    return ImGuiKey_LeftAlt;
  case KeyCode::LeftSuper:
    return ImGuiKey_LeftSuper;
  case KeyCode::RightShift:
    return ImGuiKey_RightShift;
  case KeyCode::RightControl:
    return ImGuiKey_RightCtrl;
  case KeyCode::RightAlt:
    return ImGuiKey_RightAlt;
  case KeyCode::RightSuper:
    return ImGuiKey_RightSuper;
  case KeyCode::Menu:
    return ImGuiKey_Menu;
  case KeyCode::Key0:
    return ImGuiKey_0;
  case KeyCode::Key1:
    return ImGuiKey_1;
  case KeyCode::Key2:
    return ImGuiKey_2;
  case KeyCode::Key3:
    return ImGuiKey_3;
  case KeyCode::Key4:
    return ImGuiKey_4;
  case KeyCode::Key5:
    return ImGuiKey_5;
  case KeyCode::Key6:
    return ImGuiKey_6;
  case KeyCode::Key7:
    return ImGuiKey_7;
  case KeyCode::Key8:
    return ImGuiKey_8;
  case KeyCode::Key9:
    return ImGuiKey_9;
  case KeyCode::A:
    return ImGuiKey_A;
  case KeyCode::B:
    return ImGuiKey_B;
  case KeyCode::C:
    return ImGuiKey_C;
  case KeyCode::D:
    return ImGuiKey_D;
  case KeyCode::E:
    return ImGuiKey_E;
  case KeyCode::F:
    return ImGuiKey_F;
  case KeyCode::G:
    return ImGuiKey_G;
  case KeyCode::H:
    return ImGuiKey_H;
  case KeyCode::I:
    return ImGuiKey_I;
  case KeyCode::J:
    return ImGuiKey_J;
  case KeyCode::K:
    return ImGuiKey_K;
  case KeyCode::L:
    return ImGuiKey_L;
  case KeyCode::M:
    return ImGuiKey_M;
  case KeyCode::N:
    return ImGuiKey_N;
  case KeyCode::O:
    return ImGuiKey_O;
  case KeyCode::P:
    return ImGuiKey_P;
  case KeyCode::Q:
    return ImGuiKey_Q;
  case KeyCode::R:
    return ImGuiKey_R;
  case KeyCode::S:
    return ImGuiKey_S;
  case KeyCode::T:
    return ImGuiKey_T;
  case KeyCode::U:
    return ImGuiKey_U;
  case KeyCode::V:
    return ImGuiKey_V;
  case KeyCode::W:
    return ImGuiKey_W;
  case KeyCode::X:
    return ImGuiKey_X;
  case KeyCode::Y:
    return ImGuiKey_Y;
  case KeyCode::Z:
    return ImGuiKey_Z;
  case KeyCode::F1:
    return ImGuiKey_F1;
  case KeyCode::F2:
    return ImGuiKey_F2;
  case KeyCode::F3:
    return ImGuiKey_F3;
  case KeyCode::F4:
    return ImGuiKey_F4;
  case KeyCode::F5:
    return ImGuiKey_F5;
  case KeyCode::F6:
    return ImGuiKey_F6;
  case KeyCode::F7:
    return ImGuiKey_F7;
  case KeyCode::F8:
    return ImGuiKey_F8;
  case KeyCode::F9:
    return ImGuiKey_F9;
  case KeyCode::F10:
    return ImGuiKey_F10;
  case KeyCode::F11:
    return ImGuiKey_F11;
  case KeyCode::F12:
    return ImGuiKey_F12;
  case KeyCode::F13:
    return ImGuiKey_F13;
  case KeyCode::F14:
    return ImGuiKey_F14;
  case KeyCode::F15:
    return ImGuiKey_F15;
  case KeyCode::F16:
    return ImGuiKey_F16;
  case KeyCode::F17:
    return ImGuiKey_F17;
  case KeyCode::F18:
    return ImGuiKey_F18;
  case KeyCode::F19:
    return ImGuiKey_F19;
  case KeyCode::F20:
    return ImGuiKey_F20;
  case KeyCode::F21:
    return ImGuiKey_F21;
  case KeyCode::F22:
    return ImGuiKey_F22;
  case KeyCode::F23:
    return ImGuiKey_F23;
  case KeyCode::F24:
    return ImGuiKey_F24;
  default:
    return ImGuiKey_None;
  }
}

int ConvertToGlfwCode(const KeyCode aKeyCode) {
  switch (aKeyCode) {
  case KeyCode::Space:
    return GLFW_KEY_SPACE;
  case KeyCode::Apostrophe:
    return GLFW_KEY_APOSTROPHE;
  case KeyCode::Comma:
    return GLFW_KEY_COMMA;
  case KeyCode::Minus:
    return GLFW_KEY_MINUS;
  case KeyCode::Period:
    return GLFW_KEY_PERIOD;
  case KeyCode::Slash:
    return GLFW_KEY_SLASH;
  case KeyCode::Key0:
    return GLFW_KEY_0;
  case KeyCode::Key1:
    return GLFW_KEY_1;
  case KeyCode::Key2:
    return GLFW_KEY_2;
  case KeyCode::Key3:
    return GLFW_KEY_3;
  case KeyCode::Key4:
    return GLFW_KEY_4;
  case KeyCode::Key5:
    return GLFW_KEY_5;
  case KeyCode::Key6:
    return GLFW_KEY_6;
  case KeyCode::Key7:
    return GLFW_KEY_7;
  case KeyCode::Key8:
    return GLFW_KEY_8;
  case KeyCode::Key9:
    return GLFW_KEY_9;
  case KeyCode::Semicolon:
    return GLFW_KEY_SEMICOLON;
  case KeyCode::Equal:
    return GLFW_KEY_EQUAL;
  case KeyCode::A:
    return GLFW_KEY_A;
  case KeyCode::B:
    return GLFW_KEY_B;
  case KeyCode::C:
    return GLFW_KEY_C;
  case KeyCode::D:
    return GLFW_KEY_D;
  case KeyCode::E:
    return GLFW_KEY_E;
  case KeyCode::F:
    return GLFW_KEY_F;
  case KeyCode::G:
    return GLFW_KEY_G;
  case KeyCode::H:
    return GLFW_KEY_H;
  case KeyCode::I:
    return GLFW_KEY_I;
  case KeyCode::J:
    return GLFW_KEY_J;
  case KeyCode::K:
    return GLFW_KEY_K;
  case KeyCode::L:
    return GLFW_KEY_L;
  case KeyCode::M:
    return GLFW_KEY_M;
  case KeyCode::N:
    return GLFW_KEY_N;
  case KeyCode::O:
    return GLFW_KEY_O;
  case KeyCode::P:
    return GLFW_KEY_P;
  case KeyCode::Q:
    return GLFW_KEY_Q;
  case KeyCode::R:
    return GLFW_KEY_R;
  case KeyCode::S:
    return GLFW_KEY_S;
  case KeyCode::T:
    return GLFW_KEY_T;
  case KeyCode::U:
    return GLFW_KEY_U;
  case KeyCode::V:
    return GLFW_KEY_V;
  case KeyCode::W:
    return GLFW_KEY_W;
  case KeyCode::X:
    return GLFW_KEY_X;
  case KeyCode::Y:
    return GLFW_KEY_Y;
  case KeyCode::Z:
    return GLFW_KEY_Z;
  case KeyCode::LeftBracket:
    return GLFW_KEY_LEFT_BRACKET;
  case KeyCode::Backslash:
    return GLFW_KEY_BACKSLASH;
  case KeyCode::RightBracket:
    return GLFW_KEY_RIGHT_BRACKET;
  case KeyCode::GraveAccent:
    return GLFW_KEY_GRAVE_ACCENT;
  case KeyCode ::Escape:
    return GLFW_KEY_ESCAPE;
  case KeyCode::Enter:
    return GLFW_KEY_ENTER;
  case KeyCode::Tab:
    return GLFW_KEY_TAB;
  case KeyCode::Backspace:
    return GLFW_KEY_BACKSPACE;
  case KeyCode::Insert:
    return GLFW_KEY_INSERT;
  case KeyCode::Delete:
    return GLFW_KEY_DELETE;
  case KeyCode::RightArrow:
    return GLFW_KEY_RIGHT;
  case KeyCode::LeftArrow:
    return GLFW_KEY_LEFT;
  case KeyCode::DownArrow:
    return GLFW_KEY_DOWN;
  case KeyCode::UpArrow:
    return GLFW_KEY_UP;
  case KeyCode::PageUp:
    return GLFW_KEY_PAGE_UP;
  case KeyCode::PageDown:
    return GLFW_KEY_PAGE_DOWN;
  case KeyCode::Home:
    return GLFW_KEY_HOME;
  case KeyCode::End:
    return GLFW_KEY_END;
  case KeyCode::CapsLock:
    return GLFW_KEY_CAPS_LOCK;
  case KeyCode::ScrollLock:
    return GLFW_KEY_SCROLL_LOCK;
  case KeyCode::NumLock:
    return GLFW_KEY_NUM_LOCK;
  case KeyCode::PrintScreen:
    return GLFW_KEY_PRINT_SCREEN;
  case KeyCode::Pause:
    return GLFW_KEY_PAUSE;
  case KeyCode::F1:
    return GLFW_KEY_F1;
  case KeyCode::F2:
    return GLFW_KEY_F2;
  case KeyCode::F3:
    return GLFW_KEY_F3;
  case KeyCode::F4:
    return GLFW_KEY_F4;
  case KeyCode::F5:
    return GLFW_KEY_F5;
  case KeyCode::F6:
    return GLFW_KEY_F6;
  case KeyCode::F7:
    return GLFW_KEY_F7;
  case KeyCode::F8:
    return GLFW_KEY_F8;
  case KeyCode::F9:
    return GLFW_KEY_F9;
  case KeyCode::F10:
    return GLFW_KEY_F10;
  case KeyCode::F11:
    return GLFW_KEY_F11;
  case KeyCode::F12:
    return GLFW_KEY_F12;
  case KeyCode::F13:
    return GLFW_KEY_F13;
  case KeyCode::F14:
    return GLFW_KEY_F14;
  case KeyCode::F15:
    return GLFW_KEY_F15;
  case KeyCode::F16:
    return GLFW_KEY_F16;
  case KeyCode::F17:
    return GLFW_KEY_F17;
  case KeyCode::F18:
    return GLFW_KEY_F18;
  case KeyCode::F19:
    return GLFW_KEY_F19;
  case KeyCode::F20:
    return GLFW_KEY_F20;
  case KeyCode::F21:
    return GLFW_KEY_F21;
  case KeyCode::F22:
    return GLFW_KEY_F22;
  case KeyCode::F23:
    return GLFW_KEY_F23;
  case KeyCode::F24:
    return GLFW_KEY_F24;
  case KeyCode::F25:
    return GLFW_KEY_F25;
  case KeyCode::KP0:
    return GLFW_KEY_KP_0;
  case KeyCode::KP1:
    return GLFW_KEY_KP_1;
  case KeyCode::KP2:
    return GLFW_KEY_KP_2;
  case KeyCode::KP3:
    return GLFW_KEY_KP_3;
  case KeyCode::KP4:
    return GLFW_KEY_KP_4;
  case KeyCode::KP5:
    return GLFW_KEY_KP_5;
  case KeyCode::KP6:
    return GLFW_KEY_KP_6;
  case KeyCode::KP7:
    return GLFW_KEY_KP_7;
  case KeyCode::KP8:
    return GLFW_KEY_KP_8;
  case KeyCode::KP9:
    return GLFW_KEY_KP_9;
  case KeyCode::KPDecimal:
    return GLFW_KEY_KP_DECIMAL;
  case KeyCode::KPDivide:
    return GLFW_KEY_KP_DIVIDE;
  case KeyCode::KPMultiply:
    return GLFW_KEY_KP_MULTIPLY;
  case KeyCode::KPSubtract:
    return GLFW_KEY_KP_SUBTRACT;
  case KeyCode::KPAdd:
    return GLFW_KEY_KP_ADD;
  case KeyCode::KPEnter:
    return GLFW_KEY_KP_ENTER;
  case KeyCode::KPEqual:
    return GLFW_KEY_KP_EQUAL;
  case KeyCode::LeftShift:
    return GLFW_KEY_LEFT_SHIFT;
  case KeyCode::LeftControl:
    return GLFW_KEY_LEFT_CONTROL;
  case KeyCode::LeftAlt:
    return GLFW_KEY_LEFT_ALT;
  case KeyCode::LeftSuper:
    return GLFW_KEY_LEFT_SUPER;
  case KeyCode::RightShift:
    return GLFW_KEY_RIGHT_SHIFT;
  case KeyCode ::RightControl:
    return GLFW_KEY_RIGHT_CONTROL;
  case KeyCode::RightAlt:
    return GLFW_KEY_RIGHT_ALT;
  case KeyCode::RightSuper:
    return GLFW_KEY_RIGHT_SUPER;
  case KeyCode::Menu:
    return GLFW_KEY_MENU;

  default:
    return GLFW_KEY_UNKNOWN;
  }
}

MouseButtonId ConvertToMouseButtonId(const int aButton) {
  return static_cast<MouseButtonId>(aButton);
}

int ConvertToGlfwButton(const MouseButtonId aMouseButton) {
  return static_cast<int>(aMouseButton);
}
} // namespace Events
} // namespace Kara